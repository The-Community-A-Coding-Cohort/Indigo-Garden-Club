name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  # Filter job that detects changes in specific paths
  filter:
    runs-on: ubuntu-latest
    outputs:
      source_changed: ${{ steps.filter.outputs.source }}
      terraform_changed: ${{ steps.filter.outputs.terraform }}
    steps:
      - uses: actions/checkout@v3
      - name: Filter changed files
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            source:
              - 'netflixclone/**'
              - '.github/workflows/**'
            terraform:
              - 'terraform/**'
  build:
    needs: filter
    if: needs.filter.outputs.source == 'true'
    runs-on: ubuntu-latest
    env:
      ECR_REPOSITORY: nextjs
      IMAGE_TAG: latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        run: |
          docker build -t $ECR_REPOSITORY:latest -f netflixclone/Dockerfile netflixclone

      - name: Tag Docker Image
        run: |
          docker tag $ECR_REPOSITORY:latest ${{ steps.ecr-login.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ steps.ecr-login.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: [filter, build]
    runs-on: ubuntu-latest
    env:
      ECR_REPOSITORY: nextjs
      IMAGE_TAG: latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.6

      - name: Terraform Init, Import, Plan, and Apply
        working-directory: terraform/netflixclone
        # env:
        #   TF_VAR_hosted_zone_id: ${{ secrets.HOSTED_ZONE_ID }}
        #   TF_VAR_ecr_repository_url: ${{ secrets.ECR_REPOSITORY_URL }}
        run: |
          terraform init \
            -backend-config="bucket=the-community-a-coding-cohort-tf-state-bucket" \
            -backend-config="key=nextjs/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=terraform-locks" \
            -backend-config="encrypt=true"
          terraform plan \
            -var="hosted_zone_id=${{ secrets.HOSTED_ZONE_ID }}" \
            -var="ecr_repository_url=${{ secrets.ECR_REPOSITORY_URL }}" \
            -out=tfplan
          terraform apply -auto-approve tfplan