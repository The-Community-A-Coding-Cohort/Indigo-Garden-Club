name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      source: ${{ steps.filter.outputs.source }}
      terraform: ${{ steps.filter.outputs.terraform }}
    steps:
      - uses: actions/checkout@v3
      - name: Filter changed files
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            source:
              - 'netflixclone/**'
              - '.github/workflows/**'
            terraform:
              - 'terraform/**'

  build:
    needs: filter
    runs-on: ubuntu-latest
    outputs:
      built: ${{ steps.build_image.outputs.built }}
    env:
      ECR_REPOSITORY: nextjs
      IMAGE_TAG: latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image Conditionally
        id: build_image
        run: |
          if [ "${{ needs.filter.outputs.source }}" == "true" ]; then
            echo "Source changes detected. Building Docker image..."
            docker build -t $ECR_REPOSITORY:latest -f netflixclone/Dockerfile netflixclone
            docker tag $ECR_REPOSITORY:latest ${{ steps.ecr-login.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
            docker push ${{ steps.ecr-login.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
            echo "::set-output name=built::true"
          else
            echo "No source changes detected. Skipping build."
            echo "::set-output name=built::false"
          fi

  deploy:
    needs: [filter, build]
    runs-on: ubuntu-latest
    env:
      ECR_REPOSITORY: nextjs
      IMAGE_TAG: latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Deploy Secrets to AWS Secrets Manager and get ARN
        id: deploy_secrets
        run: |
          SECRET_NAME="nextjs-secrets"
          SECRET_STRING=$(jq -n \
            --arg DATABASE_URL "${{ secrets.DATABASE_URL }}" \
            --arg NEXTAUTH_JWT_SECRET "${{ secrets.NEXTAUTH_JWT_SECRET }}" \
            --arg NEXTAUTH_SECRET "${{ secrets.NEXTAUTH_SECRET }}" \
            --arg NEXTAUTH_URL "${{ secrets.NEXTAUTH_URL }}" \
            --arg NEXT_PUBLIC_API_BASE_URL "${{ secrets.NEXT_PUBLIC_API_BASE_URL }}" \
            --arg GIT_CLIENT_ID "${{ secrets.GIT_CLIENT_ID }}" \
            --arg GIT_CLIENT_SECRET "${{ secrets.GIT_CLIENT_SECRET }}" \
            --arg GOOGLE_CLIENT_ID "${{ secrets.GOOGLE_CLIENT_ID }}" \
            --arg GOOGLE_CLIENT_SECRET "${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            '{
              DATABASE_URL: $DATABASE_URL,
              NEXTAUTH_JWT_SECRET: $NEXTAUTH_JWT_SECRET,
              NEXTAUTH_SECRET: $NEXTAUTH_SECRET,
              NEXTAUTH_URL: $NEXTAUTH_URL,
              NEXT_PUBLIC_API_BASE_URL: $NEXT_PUBLIC_API_BASE_URL,
              GIT_CLIENT_ID: $GIT_CLIENT_ID,
              GIT_CLIENT_SECRET: $GIT_CLIENT_SECRET,
              GOOGLE_CLIENT_ID: $GOOGLE_CLIENT_ID,
              GOOGLE_CLIENT_SECRET: $GOOGLE_CLIENT_SECRET
            }')
          
          echo "Deploying secret $SECRET_NAME"
          
          aws secretsmanager update-secret --secret-id "$SECRET_NAME" --secret-string "$SECRET_STRING" || \
          aws secretsmanager create-secret --name "$SECRET_NAME" --secret-string "$SECRET_STRING"
          
          # Retrieve the ARN from the secret
          SECRET_ARN=$(aws secretsmanager describe-secret --secret-id "$SECRET_NAME" --query 'ARN' --output text)
          echo "Secret ARN: $SECRET_ARN"
          
          # Set the secret ARN as an output for later steps
          echo "::set-output name=secret_arn::$SECRET_ARN"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.6

      - name: Terraform Init, Plan, and Apply
        env:
          SECRET_ARN: ${{ steps.deploy_secrets.outputs.secret_arn }}
        working-directory: terraform/netflixclone
        run: |
          terraform init \
            -backend-config="bucket=the-community-a-coding-cohort-tf-state-bucket" \
            -backend-config="key=nextjs/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=terraform-locks" \
            -backend-config="encrypt=true"
          terraform plan \
            -var="hosted_zone_id=${{ secrets.HOSTED_ZONE_ID }}" \
            -var="ecr_repository_url=${{ secrets.ECR_REPOSITORY_URL }}" \
            -var="secrets_arn=$SECRET_ARN" \
            -out=tfplan
          terraform apply -auto-approve tfplan